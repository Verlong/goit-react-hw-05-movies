{"version":3,"file":"static/js/97.d9e85cc1.chunk.js","mappings":"sOACMA,EAAU,mCAEhBC,EAAAA,EAAAA,SAAAA,QAAyB,gCAElB,IAAMC,EAAiB,mCAAG,oGACRD,EAAAA,EAAAA,IAAA,qCAAwCD,IADhC,cACzBG,EADyB,yBAExBA,EAASC,MAFe,2CAAH,qDAKjBC,EAAY,mCAAG,WAAMC,GAAN,uFACHL,EAAAA,EAAAA,IAAA,+BACGD,EADH,iCACmCM,EADnC,gCADG,cACpBH,EADoB,yBAInBA,EAASC,MAJU,2CAAH,qD,4CCYzB,IAlBe,SAAC,GAAiB,IAAfG,EAAc,EAAdA,QAChB,OACE,0BACE,SAAC,KAAD,CACEA,QAASA,EACTC,YAAY,OACZC,YAAY,IACZC,kBAAkB,OAClBC,MAAM,KACNC,SAAS,KAIhB,C,2HChBD,GAAiB,E,SCmCjB,EAjCkB,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cACnB,GAA0BC,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KAYA,OACE,kBAAMC,UAAWC,EAAAA,KAAUC,SAXd,SAAAC,GACbA,EAAEC,iBACFR,EAAcE,GACdC,EAAS,GACV,EAOC,WACE,mBAAQM,KAAK,SAASL,UAAWC,EAAAA,OAAjC,UACE,iBAAMD,UAAWC,EAAAA,MAAjB,SAA4B,cAG9B,kBACEK,KAAK,QACLD,KAAK,OACLE,aAAa,MACbC,SAde,SAAAL,GACnBJ,EAASI,EAAEM,OAAOC,MACnB,EAaKA,MAAOZ,EACPa,WAAS,EACTC,YAAY,eACZZ,UAAWC,EAAAA,UAIlB,EC8BD,EAtDe,WAAO,IAAD,EACbY,GAAWC,EAAAA,EAAAA,MACjB,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACMC,EAAS,UAAGF,EAAaG,IAAI,oBAApB,QAAoC,GACnD,GAAoCtB,EAAAA,EAAAA,UAAS,IAA7C,eAAOuB,EAAP,KAAmBC,EAAnB,KACA,GAAkCxB,EAAAA,EAAAA,WAAS,GAA3C,eAAOyB,EAAP,KAAkBC,EAAlB,KACA,GAA0B1B,EAAAA,EAAAA,WAAS,GAAnC,eAAO2B,EAAP,KAAcC,EAAd,MAEAC,EAAAA,EAAAA,YAAU,WACU,KAAdR,IAGJG,EAAc,IACdE,GAAa,IAEbnC,EAAAA,EAAAA,IAAa8B,GAAWS,MAAK,SAAAxC,GAC3B,IAAKA,EAAKyC,QAAQC,OAGhB,OAFAN,GAAa,GACbE,GAAS,GACFK,QAAQC,IACb,2DAGJN,GAAS,GACTJ,EAAclC,EAAKyC,SACnBL,GAAa,EACd,IACF,GAAE,CAACL,IAQJ,OACE,6BACE,SAAC,EAAD,CAAWhB,SARM,SAAAC,GACnBA,EAAEC,iBACF,IAAM4B,EAAa7B,EAAE8B,cACrBhB,EAAgB,CAAEC,UAAWc,EAAWE,SAAShB,UAAUR,QAC3DsB,EAAWG,OACZ,IAIIX,IAAS,uBAAG,uCACb,0BACGJ,EAAWgB,KAAI,SAAAC,GACd,OACE,yBACE,SAAC,KAAD,CAAMC,GAAE,kBAAaD,EAAME,IAAMC,MAAO,CAAEC,KAAM5B,GAAhD,SACGwB,EAAMK,gBAAkBL,EAAM/B,QAF1B+B,EAAME,GAMlB,IACAjB,IAAa,SAACqB,EAAA,EAAD,SAIrB,C","sources":["api/get-api-key.js","components/loader/Loader.jsx","components/searchbar/SearchBar.module.css","components/searchbar/SearchBar.jsx","pages/movie/movies.jsx"],"sourcesContent":["import axios from 'axios';\nconst API_KEY = '60dca8f10f0481ca0ad574dccc048134';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nexport const getTrendingMovies = async () => {\n  const response = await axios.get(`trending/movie/day?api_key=${API_KEY}`);\n  return response.data;\n};\n\nexport const searchMovies = async query => {\n  const response = await axios.get(\n    `search/movie?api_key=${API_KEY}&language=en-US&query=${query}&page=1&include_adult=false`\n  );\n  return response.data;\n};\n\nexport const getMovieDetails = async id => {\n  const response = await axios.get(\n    `movie/${id}?api_key=${API_KEY}&language=en-US`\n  );\n  return response.data;\n};\n\nexport const getMovieCast = async id => {\n  const response = await axios.get(\n    `movie/${id}/credits?api_key=${API_KEY}&language=en-US`\n  );\n  return response.data;\n};\n\nexport const getMovieReviews = async id => {\n  const response = await axios.get(\n    `movie/${id}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n  );\n  return response.data;\n};\n\n// 'https://api.themoviedb.org/3/trending/movie/day?language=en-US'\n// 'https://api.themoviedb.org/3/search/movie?include_adult=false&language=en-US&page=1'\n// 'https://api.themoviedb.org/3/movie/movie_id?language=en-US'\n// 'https://api.themoviedb.org/3/movie/movie_id/credits?language=en-US'\n// 'https://api.themoviedb.org/3/movie/movie_id/reviews?language=en-US&page=1'\n","import { RotatingLines } from 'react-loader-spinner';\n\nimport PropTypes from 'prop-types';\n\nconst Loader = ({ loading }) => {\n  return (\n    <div>\n      <RotatingLines\n        loading={loading}\n        strokeColor=\"grey\"\n        strokeWidth=\"5\"\n        animationDuration=\"0.75\"\n        width=\"96\"\n        visible={true}\n      />\n    </div>\n  );\n};\nLoader.propTypes = {\n  loading: PropTypes.bool,\n};\n\nexport default Loader;\n","// extracted by mini-css-extract-plugin\nexport default {};","import React, { useState } from 'react';\nimport css from './SearchBar.module.css';\n\nconst Searchbar = ({ getInputValue }) => {\n  const [input, setInput] = useState('');\n\n  const search = e => {\n    e.preventDefault();\n    getInputValue(input);\n    setInput('');\n  };\n\n  const handleChange = e => {\n    setInput(e.target.value);\n  };\n\n  return (\n    <form className={css.form} onSubmit={search}>\n      <button type=\"submit\" className={css.button}>\n        <span className={css.label}>Search</span>\n      </button>\n\n      <input\n        name=\"input\"\n        type=\"text\"\n        autoComplete=\"off\"\n        onChange={handleChange}\n        value={input}\n        autoFocus\n        placeholder=\"Search movie\"\n        className={css.input}\n      />\n    </form>\n  );\n};\n\nexport default Searchbar;\n","// import { useState } from 'react';\nimport { Link, useSearchParams, useLocation } from 'react-router-dom';\n// import location from '../../components/movie-detail/movie-details';\nimport Loader from 'components/loader/Loader';\n\nimport { useState, useEffect } from 'react';\nimport { searchMovies } from 'api/get-api-key';\n// import { useSearchParams, useLocation } from 'react-router-dom';\nimport Searchbar from 'components/searchbar/SearchBar';\n\nconst Movies = () => {\n  const location = useLocation();\n  const [searchParams, setSearchParams] = useSearchParams();\n  const movieName = searchParams.get('movieName') ?? '';\n  const [moviesList, setMoviesList] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(false);\n\n  useEffect(() => {\n    if (movieName === '') {\n      return;\n    }\n    setMoviesList([]);\n    setIsLoading(true);\n\n    searchMovies(movieName).then(data => {\n      if (!data.results.length) {\n        setIsLoading(false);\n        setError(true);\n        return console.log(\n          'There is no movies with this request. Please, try again'\n        );\n      }\n      setError(false);\n      setMoviesList(data.results);\n      setIsLoading(false);\n    });\n  }, [movieName]);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const searchForm = e.currentTarget;\n    setSearchParams({ movieName: searchForm.elements.movieName.value });\n    searchForm.reset();\n  };\n  return (\n    <main>\n      <Searchbar onSubmit={handleSubmit} />\n      {error && <p>We can't find any movie with name</p>}\n      <ul>\n        {moviesList.map(movie => {\n          return (\n            <li key={movie.id}>\n              <Link to={`/movies/${movie.id}`} state={{ from: location }}>\n                {movie.original_title || movie.name}\n              </Link>\n            </li>\n          );\n        })}\n        {isLoading && <Loader />}\n      </ul>\n    </main>\n  );\n};\nexport default Movies;\n"],"names":["API_KEY","axios","getTrendingMovies","response","data","searchMovies","query","loading","strokeColor","strokeWidth","animationDuration","width","visible","getInputValue","useState","input","setInput","className","css","onSubmit","e","preventDefault","type","name","autoComplete","onChange","target","value","autoFocus","placeholder","location","useLocation","useSearchParams","searchParams","setSearchParams","movieName","get","moviesList","setMoviesList","isLoading","setIsLoading","error","setError","useEffect","then","results","length","console","log","searchForm","currentTarget","elements","reset","map","movie","to","id","state","from","original_title","Loader"],"sourceRoot":""}