{"version":3,"file":"static/js/97.ea28b0a0.chunk.js","mappings":"2JAsBA,IAlBe,SAAC,GAAiB,IAAfA,EAAc,EAAdA,QAChB,OACE,0BACE,SAAC,KAAD,CACEA,QAASA,EACTC,YAAY,OACZC,YAAY,IACZC,kBAAkB,OAClBC,MAAM,KACNC,SAAS,KAIhB,C,2HChBD,EAAuB,wBAAvB,EAA2D,6BAA3D,EAAsG,+B,SCyBtG,EAvBkB,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAGnB,OACE,kBAAMA,SAAUA,EAAUC,UAAWC,EAArC,WACE,mBAAQC,KAAK,SAASF,UAAWC,EAAjC,UACE,0BAAM,cAER,kBACEC,KAAK,OACLC,KAAK,YACLC,QAAQ,yHACRC,MAAM,0EACNC,UAAQ,EACRC,aAAa,MACbC,WAAS,EACTC,YAAY,kBACZT,UAAWC,MAIlB,ECgDD,EA9De,WAAO,IAAD,EACbS,GAAWC,EAAAA,EAAAA,MACjB,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACMC,EAAS,UAAGF,EAAaG,IAAI,oBAApB,QAAoC,GACnD,GAAoCC,EAAAA,EAAAA,UAAS,IAA7C,eAAOC,EAAP,KAAmBC,EAAnB,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACA,GAA0BJ,EAAAA,EAAAA,WAAS,GAAnC,eAAOK,EAAP,KAAcC,EAAd,MAEAC,EAAAA,EAAAA,YAAU,WACU,KAAdT,IAGJI,EAAc,IACdE,GAAa,IAEbI,EAAAA,EAAAA,IAAaV,GAAWW,MAAK,SAAAC,GAC3B,IAAKA,EAAKC,QAAQC,OAGhB,OAFAR,GAAa,GACbE,GAAS,GACFO,QAAQC,IACb,2DAGJR,GAAS,GACTJ,EAAcQ,EAAKC,SACnBP,GAAa,EACd,IACF,GAAE,CAACN,IAYJ,OACE,6BACE,SAAC,EAAD,CAAWhB,SAZM,SAAAiC,GACnBA,EAAEC,iBACF,IAAMC,EAAaF,EAAEG,cACrBrB,EAAgB,CAAEC,UAAWmB,EAAWE,SAASrB,UAAUsB,OAE5D,IAQIf,IAAS,uBAAG,uCACb,0BACGJ,EAAWoB,KAAI,SAAAC,GACd,OACE,yBACE,UAAC,KAAD,CAAMC,GAAE,kBAAaD,EAAME,IAAMC,MAAO,CAAEC,KAAMjC,GAAhD,WACE,gBACEkC,IAZH,kCAYeL,EAAMM,YAClBC,IAAKP,EAAMQ,iBAEZR,EAAMQ,gBAAkBR,EAAMpC,SAN1BoC,EAAME,GAUlB,IACArB,IAAa,SAAC4B,EAAA,EAAD,SAIrB,C","sources":["components/loader/Loader.jsx","webpack://goit-react-hw-05-movies/./src/components/searchbar/SearchBar.module.css?9914","components/searchbar/SearchBar.jsx","pages/movie/movies.jsx"],"sourcesContent":["import { RotatingLines } from 'react-loader-spinner';\n\nimport PropTypes from 'prop-types';\n\nconst Loader = ({ loading }) => {\n  return (\n    <div>\n      <RotatingLines\n        loading={loading}\n        strokeColor=\"grey\"\n        strokeWidth=\"5\"\n        animationDuration=\"0.75\"\n        width=\"96\"\n        visible={true}\n      />\n    </div>\n  );\n};\nLoader.propTypes = {\n  loading: PropTypes.bool,\n};\n\nexport default Loader;\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"SearchBar_form__uMzJX\",\"searchBtn\":\"SearchBar_searchBtn__5aM4s\",\"searchInput\":\"SearchBar_searchInput__6Ozls\"};","import React from 'react';\nimport css from './SearchBar.module.css';\n\nconst Searchbar = ({ onSubmit }) => {\n  // const [input, setInput] = useState('');\n\n  return (\n    <form onSubmit={onSubmit} className={css.form}>\n      <button type=\"submit\" className={css.searchBtn}>\n        <span>Search</span>\n      </button>\n      <input\n        type=\"text\"\n        name=\"movieName\"\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"May contain only letters, apostrophe, dash and spaces. For example moon\"\n        required\n        autoComplete=\"off\"\n        autoFocus\n        placeholder=\"Search movie...\"\n        className={css.searchInput}\n      />\n    </form>\n  );\n};\n\nexport default Searchbar;\n","// import { useState } from 'react';\nimport { Link, useSearchParams, useLocation } from 'react-router-dom';\n// import location from '../../components/movie-detail/movie-details';\nimport Loader from 'components/loader/Loader';\n\nimport { useState, useEffect } from 'react';\nimport { searchMovies } from 'api/get-api-key';\n// import { useSearchParams, useLocation } from 'react-router-dom';\nimport Searchbar from 'components/searchbar/SearchBar';\n\nconst Movies = () => {\n  const location = useLocation();\n  const [searchParams, setSearchParams] = useSearchParams();\n  const movieName = searchParams.get('movieName') ?? '';\n  const [moviesList, setMoviesList] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(false);\n\n  useEffect(() => {\n    if (movieName === '') {\n      return;\n    }\n    setMoviesList([]);\n    setIsLoading(true);\n\n    searchMovies(movieName).then(data => {\n      if (!data.results.length) {\n        setIsLoading(false);\n        setError(true);\n        return console.log(\n          'There is no movies with this request. Please, try again'\n        );\n      }\n      setError(false);\n      setMoviesList(data.results);\n      setIsLoading(false);\n    });\n  }, [movieName]);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const searchForm = e.currentTarget;\n    setSearchParams({ movieName: searchForm.elements.movieName.value });\n    // searchForm.reset();\n  };\n\n  // console.log(moviesList);\n  const path = 'https://image.tmdb.org/t/p/w300';\n\n  return (\n    <main>\n      <Searchbar onSubmit={handleSubmit} />\n      {error && <p>We can't find any movie with name</p>}\n      <ul>\n        {moviesList.map(movie => {\n          return (\n            <li key={movie.id}>\n              <Link to={`/movies/${movie.id}`} state={{ from: location }}>\n                <img\n                  src={path + movie.poster_path}\n                  alt={movie.original_title}\n                />\n                {movie.original_title || movie.name}\n              </Link>\n            </li>\n          );\n        })}\n        {isLoading && <Loader />}\n      </ul>\n    </main>\n  );\n};\nexport default Movies;\n"],"names":["loading","strokeColor","strokeWidth","animationDuration","width","visible","onSubmit","className","css","type","name","pattern","title","required","autoComplete","autoFocus","placeholder","location","useLocation","useSearchParams","searchParams","setSearchParams","movieName","get","useState","moviesList","setMoviesList","isLoading","setIsLoading","error","setError","useEffect","searchMovies","then","data","results","length","console","log","e","preventDefault","searchForm","currentTarget","elements","value","map","movie","to","id","state","from","src","poster_path","alt","original_title","Loader"],"sourceRoot":""}